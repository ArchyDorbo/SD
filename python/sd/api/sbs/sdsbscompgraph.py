# ADOBE CONFIDENTIAL
#
# Copyright 2010-2024 Adobe
# All Rights Reserved.
#
# NOTICE:  Adobe permits you to use, modify, and distribute this file in
# accordance with the terms of the Adobe license agreement accompanying it.
# If you have received this file from a source other than Adobe,
# then your use, modification, or distribution of it requires the prior
# written permission of Adobe.
#
# Autogenerated by ipa. Don't edit directly, edit the definitions and regenerate it when changing
#

from __future__ import annotations

import ctypes
import base64

from typing import Any, Optional

import sd
from ..sdapiobject import SDAPIObject
from ..sdproperty import SDProperty
from ..sdtexture import SDTexture
from ..sdarray import SDArray
from .sdsbscompgraphpreset import SDSBSCompGraphPreset
from ..sdvaluestring import SDValueString
from ..sdgraph import SDGraph
from ..sdbasetypes import int2
from ..sdapiobject import SDApiError
from ..sdproperty import SDPropertyCategory
from ..sdproperty import SDPropertyInheritanceMethod
from ..sdtexture import SBSPixelFormat
from ..apiexception import APIException

class SDSBSCompGraph(SDGraph):
    """
    Class managing a Substance compositing graph
    """
    def __init__(self, APIContext, handle, *args, **kwargs):
        """
        Constructor

        :rtype: SDSBSCompGraph
        """
        super(SDSBSCompGraph, self).__init__(APIContext, handle, *args, **kwargs)

    @staticmethod
    def sNew(parent : SDAPIObject) -> SDSBSCompGraph:
        """
        Create a new SDSBSCompGraph under the specified parent

        :param parent: The parent data that will contains the newly created compositing graph. Can be SDPackage or SDResourceFolder
        """
        outResource = ctypes.c_void_p()
        _res = sd.getContext().SDSBSCompGraph_sNew(parent.mHandle, ctypes.byref(outResource))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        constructor = sd.getContext().mTypeMap[SDAPIObject(sd.getContext(), outResource, ownHandle=False).getClassName()]
        return constructor(sd.getContext(), outResource.value, ownHandle=True)

    def compute(self) -> None:
        """
        Compute the SBSGraph. Ensure all graph outputs textures are available and up to date. This function blocks the execution until completion

        """
        _res = self.mAPIContext.SDSBSCompGraph_compute(self.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

    def getPropertyInheritanceMethod(self, sdProperty : SDProperty) -> SDPropertyInheritanceMethod:
        """
        For graph properties that support it, retrieve the inheritance method of the specified property. See 'SDPropertyInheritanceMethod'

        :param sdProperty: The property we want to query the inheritance method
        """
        outInheritanceMethod = ctypes.c_int()
        _res = self.mAPIContext.SDSBSCompGraph_getPropertyInheritanceMethod(self.mHandle, sdProperty.mHandle, ctypes.byref(outInheritanceMethod))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return SDPropertyInheritanceMethod(outInheritanceMethod.value)

    def setPropertyInheritanceMethod(self, sdProperty : SDProperty, inheritanceMethod : SDPropertyInheritanceMethod) -> None:
        """
        For graph properties that support it, set the inheritance method of the specified property. See 'SDPropertyInheritanceMethod'

        :param sdProperty: The property we want to set the inheritance method
        :param inheritanceMethod: The inheritance method to set on the property
        """
        _res = self.mAPIContext.SDSBSCompGraph_setPropertyInheritanceMethod(self.mHandle, sdProperty.mHandle, inheritanceMethod.value)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

    def getUID(self) -> str:
        """
        Helper used to get the UID of the graph

        """
        outUID = ctypes.c_char_p()
        _res = self.mAPIContext.SDSBSCompGraph_getUID(self.mHandle, ctypes.byref(outUID))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return outUID.value.decode('utf-8') # type: ignore

    @staticmethod
    def getSupportedGraphTypeCount() -> int:
        """
        Return the number of supported graph types

        """
        outSupportedGraphTypeCount = ctypes.c_size_t()
        _res = sd.getContext().SDSBSCompGraph_getSupportedGraphTypeCount(ctypes.byref(outSupportedGraphTypeCount))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return outSupportedGraphTypeCount.value

    @staticmethod
    def getSupportedGraphTypeAt(supportedGraphTypeIndex : int) -> str:
        """
        Return the supported graph type at a specific index

        :param supportedGraphTypeIndex: The index of the supported graph type to get
        """
        outSupportedGraphType = ctypes.c_char_p()
        _res = sd.getContext().SDSBSCompGraph_getSupportedGraphTypeAt(supportedGraphTypeIndex, ctypes.byref(outSupportedGraphType))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return outSupportedGraphType.value.decode('utf-8') # type: ignore

    def getGraphType(self) -> str:
        """
        Helper used to get the type of the graph

        """
        outGraphType = ctypes.c_char_p()
        _res = self.mAPIContext.SDSBSCompGraph_getGraphType(self.mHandle, ctypes.byref(outGraphType))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return outGraphType.value.decode('utf-8') # type: ignore

    def setGraphType(self, graphType : str) -> None:
        """
        Set the graph type of the current graph.

        :param graphType: The new graph type of the graph.
        """
        _res = self.mAPIContext.SDSBSCompGraph_setGraphType(self.mHandle, ctypes.create_string_buffer(graphType.encode('utf-8')))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

    def getExposedInSBSAR(self) -> bool:
        """
        Return True if the graph is exposed in SBSAR

        """
        outExposedInSBSAR = ctypes.c_bool()
        _res = self.mAPIContext.SDSBSCompGraph_getExposedInSBSAR(self.mHandle, ctypes.byref(outExposedInSBSAR))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return outExposedInSBSAR.value

    def getIcon(self) -> Optional[SDTexture]:
        """
        Helper used to get the icon of the graph

        """
        outSDTexture = ctypes.c_void_p()
        _res = self.mAPIContext.SDSBSCompGraph_getIcon(self.mHandle, ctypes.byref(outSDTexture))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outSDTexture, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outSDTexture.value, ownHandle=True)

    def setIcon(self, sdTexture : SDTexture) -> None:
        """
        Helper used to set the icon of the graph

        :param sdTexture: The texture that will be used as icon
        """
        _res = self.mAPIContext.SDSBSCompGraph_setIcon(self.mHandle, sdTexture.mHandle)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

    def getDefaultParentSize(self) -> int2:
        """
        Get the default parent size of the graph

        """
        outSize = int2()
        _res = self.mAPIContext.SDSBSCompGraph_getDefaultParentSize(self.mHandle, ctypes.byref(outSize))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return outSize

    def setDefaultParentSize(self, size : int2) -> None:
        """
        Set the default parent size of the graph

        :param size: The new default parent size
        """
        _res = self.mAPIContext.SDSBSCompGraph_setDefaultParentSize(self.mHandle, ctypes.byref(size))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

    def getPresets(self) -> SDArray[SDSBSCompGraphPreset]:
        """
        Get all presets of this graph

        """
        outArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDSBSCompGraph_getPresets(self.mHandle, ctypes.byref(outArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outArray.value, ownHandle=True)

    def getPreset(self, presetLabel : str) -> Optional[SDSBSCompGraphPreset]:
        """
        Get the preset with a specified id. Can be None

        :param presetLabel: The label of the preset
        """
        outPreset = ctypes.c_void_p()
        _res = self.mAPIContext.SDSBSCompGraph_getPreset(self.mHandle, ctypes.create_string_buffer(presetLabel.encode('utf-8')), ctypes.byref(outPreset))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outPreset, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outPreset.value, ownHandle=True)

    def newPreset(self, presetLabel : str) -> SDSBSCompGraphPreset:
        """
        Create a new preset

        :param presetLabel: The label of the preset to create
        """
        outPreset = ctypes.c_void_p()
        _res = self.mAPIContext.SDSBSCompGraph_newPreset(self.mHandle, ctypes.create_string_buffer(presetLabel.encode('utf-8')), ctypes.byref(outPreset))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outPreset, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outPreset.value, ownHandle=True)

    def deletePreset(self, presetLabel : str) -> None:
        """
        Delete a preset

        :param presetLabel: The label of the preset to delete
        """
        _res = self.mAPIContext.SDSBSCompGraph_deletePreset(self.mHandle, ctypes.create_string_buffer(presetLabel.encode('utf-8')))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

    def getInputIdentifiers(self) -> SDArray[SDValueString]:
        """
        Get the list of graph input identifiers.

        """
        outInputIdArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDSBSCompGraph_getInputIdentifiers(self.mHandle, ctypes.byref(outInputIdArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outInputIdArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outInputIdArray.value, ownHandle=True)

    def getOutputIdentifiers(self) -> SDArray[SDValueString]:
        """
        Get the list of graph output identifiers.

        """
        outOutputIdArray = ctypes.c_void_p()
        _res = self.mAPIContext.SDSBSCompGraph_getOutputIdentifiers(self.mHandle, ctypes.byref(outOutputIdArray))
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        constructor = self.mAPIContext.mTypeMap[SDAPIObject(self.mAPIContext, outOutputIdArray, ownHandle=False).getClassName()]
        return constructor(self.mAPIContext, outOutputIdArray.value, ownHandle=True)

    def reorderGraphInput(self, inputIdentifier : str, newPosition : int) -> None:
        """
        Reorder an input in the list of graph inputs

        :param inputIdentifier: The identifier of the input to reorder
        :param newPosition: The new position of the input
        """
        _res = self.mAPIContext.SDSBSCompGraph_reorderGraphInput(self.mHandle, ctypes.create_string_buffer(inputIdentifier.encode('utf-8')), newPosition)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

    def reorderGraphOutput(self, outputIdentifier : str, newPosition : int) -> None:
        """
        Reorder an output in the list of graph outputs

        :param outputIdentifier: The identifier of the output to reorder
        :param newPosition: The new position of the output
        """
        _res = self.mAPIContext.SDSBSCompGraph_reorderGraphOutput(self.mHandle, ctypes.create_string_buffer(outputIdentifier.encode('utf-8')), newPosition)
        if _res != SDApiError.NoError.value:
            if _res == SDApiError.NoErrorOutputParamNotSet.value:
                return None # type: ignore
            raise APIException(SDApiError(_res))
        return None

